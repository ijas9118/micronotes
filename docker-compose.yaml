services:
  postgres-db:
    container_name: postgres-db
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: micronotes
      POSTGRES_PASSWORD: cantremember
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-database.sql:/docker-entrypoint-initdb.d/init-database.sql
    ports:
      - "5432:5432"
    networks:
      - app-network

  mongo-db:
    container_name: mongo-db
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb-data:/data/db
    networks:
      - app-network

  redis-stack:
    container_name: redis-stack
    image: redis/redis-stack:7.2.0-v18
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  api-gateway:
    container_name: api-gateway
    image: api-gateway-image
    build: ./services/api-gateway
    ports:
      - "3000:3000"
    env_file:
      - ./services/api-gateway/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - app-network

  auth-service:
    container_name: auth-service
    image: auth-service-image
    build: ./services/auth-service
    ports:
      - "3001:3001"
    depends_on:
      - postgres-db
      - kafka
      - redis-stack
    env_file:
      - ./services/auth-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - app-network

  user-service:
    container_name: user-service
    image: user-service-image
    build:
      context: ./services/user-service
      dockerfile: Dockerfile.dev
    ports:
      - "3002:3002"
    depends_on:
      - mongo-db
      - kafka
    env_file:
      - ./services/user-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - app-network

  notes-service:
    container_name: notes-service
    image: notes-service-image
    build: ./services/notes-service
    ports:
      - "3003:3003"
    depends_on:
      - postgres-db
    env_file:
      - ./services/notes-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_MODE: "true"
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKAJS_NO_PARTITIONER_WARNING: 1
    volumes:
      - kafka_kraft:/var/lib/kafka/data
    networks:
      - app-network

  kafka-ui:
    image: "provectuslabs/kafka-ui"
    container_name: kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_READONLY: "false"
      KAFKA_CLUSTERS_0_TOPIC_AUTO_CREATE: "true"
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    networks:
      - app-network

volumes:
  postgres-data:
  mongodb-data:
  redis-data:
  kafka_kraft:

networks:
  app-network:
    driver: bridge
